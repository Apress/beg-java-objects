


                CHAPTER 16 SRS NOTES
                ====================


TWO CLASSES HAVE BEEN *ADDED* AS OF CHAPTER 16:

	MainFrame
	PasswordPopup

AND TWO HAVE *CHANGED* SINCE CHAPTER 15:

	Student
	SRS

TOTAL OF FOURTEEN CLASSES *UNCHANGED* SINCE CHAPTER 15:

	Course 
	CourseCatalog
	EnrollmentStatus 
	Faculty
	InvalidStudentException
	Person 
	Professor 
	ScheduleOfClasses 
	Section 
	SRSDataAccess
	SRSInitializationException
	StudentPersistenceException
	Transcript 
	TranscriptEntry

FOR A GRAND TOTAL OF EIGHTEEN CLASSES.

===

OTHER FILES IN THIS DIRECTORY ARE AS FOLLOWS:

*.dat - miscellaneous data files read by the SRS application

*.dat.orig - original versions of selected data files, to be used in 
"resetting" file contents if the programs are to be rerun multiple times

reset.bat - a DOS script for reinstating the contents of various *.dat
files to their original state if the programs are to be rerun multiple times 

FileNames.properties - a Java properties file that maps symbolic file names
to physical file names so that the latter needn't be hardcoded into the 
SRS application

===

THE REMAINING FOUR FILES, IF PRESENT, ARE TO BE *DELETED*:

code.bat 
copyCode.bat
diffCode.bat
separator.txt

===============

// MainFrame.java - Chapter 16, Java 5 version.

// Copyright 2005 by Jacquie Barker - all rights reserved.

// A GUI class.


import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
import java.util.*;

public class MainFrame extends JFrame {
	// Define all of the components here as attributes of this class.

	private JPanel leftPanel;
	private JPanel topLeftPanel;
	private JPanel labelPanel;
	private JPanel fieldPanel;
	private JPanel bottomLeftPanel;
	private JPanel rightPanel;
	private JPanel buttonPanel;
	private JTextField ssnField;
	//? private JTextField nameField;
	private JLabel nameLabel;
	private JLabel totalCoursesLabel;
	private JButton dropButton;
	private JButton addButton;
	private JButton logoffButton;
	private JButton saveScheduleButton; 
	private JLabel l1;
	private JLabel l2;
	private JLabel l3;
	private JLabel l4;
	private JList studentCourseList;
	private JList scheduleOfClassesList;

	// Maintain a handle on the Student who is logged in.
	// (Whenever this is set to null, nobody is officially logged on.)

	private Student currentUser;

	// Constructor.

	public MainFrame() {
		// Initialize attributes.

		currentUser = null;

		// Note that using "this." as a prefix is unnecessary -
		// any method calls that stand alone (without a dot notation
		// prefix) are UNDERSTOOD to be invoked on THIS object.

		this.setTitle("Student Registration System");
		this.setSize(500, 300);
		Container contentPane = this.getContentPane( );

		// Technique for centering a frame on the screen.

		Dimension frameSize = this.getSize();
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		this.setLocation((screenSize.width - frameSize.width)/2, 
		                 (screenSize.height - frameSize.height)/2);

		// Create a few panels.

		leftPanel = new JPanel();
		leftPanel.setLayout(new GridLayout(2, 1));  

		topLeftPanel = new JPanel();
		topLeftPanel.setLayout(new GridLayout(1, 2));  

		labelPanel = new JPanel();
		labelPanel.setLayout(new GridLayout(4, 1));

		fieldPanel = new JPanel();
		fieldPanel.setLayout(new GridLayout(4, 1));

		bottomLeftPanel = new JPanel();
		bottomLeftPanel.setLayout(new BorderLayout());
		
		rightPanel = new JPanel();
		rightPanel.setLayout(new BorderLayout());

		buttonPanel = new JPanel();
		buttonPanel.setLayout(new GridLayout(1, 4)); 

		// We'll allow the main frame's layout to remain the
		// default BorderLayout.

		// Note that we are adding labels without maintaining 
		// handles on them!  This is because we don't need to
		// manipulate them programmatically after the fact.
		// Thus, we use the same reference variable "l" repeatedly. 

		JLabel l = new JLabel("SSN:  ");
		l.setForeground(Color.black);
 		labelPanel.add(l);

		l = new JLabel("Name:  ");
		l.setForeground(Color.black);
 		labelPanel.add(l);

		l = new JLabel("Total Courses:  ");
		l.setForeground(Color.black);
		labelPanel.add(l);

		// Add an empty label for padding/white space.

		l = new JLabel("");
 		labelPanel.add(l);

		// We DO maintain handles on modifiable components, however, so
		// that we can later go back and read/write their contents
		// by name.  Note our choice of descriptive names for these.

 		ssnField = new JTextField(10);

 		//? nameField = new JTextField(10);
 		nameLabel = new JLabel();
		nameLabel.setForeground(Color.black);

		totalCoursesLabel = new JLabel(); 
		totalCoursesLabel.setForeground(Color.black);

		fieldPanel.add(ssnField);
		//? fieldPanel.add(nameField);
		fieldPanel.add(nameLabel);
		fieldPanel.add(totalCoursesLabel);
		
		// Add an empty label for padding/white space.

		l = new JLabel("");
 		fieldPanel.add(l);

		// Create the buttons and add them to their panel.  Again,
		// note use of descriptive names.

		dropButton = new JButton("Drop");
		addButton = new JButton("Add");
		logoffButton = new JButton("Log Off");

		// Technique for creating a multi-line button label.

		saveScheduleButton = new JButton();
		saveScheduleButton.setLayout(new GridLayout(2, 1));
		l1 = new JLabel("Save My", JLabel.CENTER);
		l1.setForeground(Color.black);
		l2 = new JLabel("Schedule", JLabel.CENTER);
		l2.setForeground(Color.black);
		saveScheduleButton.add(l1);
		saveScheduleButton.add(l2);

		buttonPanel.add(dropButton);
		buttonPanel.add(saveScheduleButton);
		buttonPanel.add(new JLabel("")); // white space padding
		buttonPanel.add(addButton);
		buttonPanel.add(logoffButton);

		studentCourseList = new JList();
		studentCourseList.setFixedCellWidth(200);
		bottomLeftPanel.add(studentCourseList, BorderLayout.CENTER);

		l = new JLabel("Registered For:");
		l.setForeground(Color.black);
		bottomLeftPanel.add(l, BorderLayout.NORTH);

		l = new JLabel("--- Schedule of Classes ---", JLabel.CENTER);
		l.setForeground(Color.black);
		rightPanel.add(l, BorderLayout.NORTH);

		// Retrieve a Collection of Sections from the main ScheduleOfClasses,
		// then sort it via a private "housekeeping" method, 
		// sortSections, before displaying it.

		scheduleOfClassesList = new JList(sortSections(SRS.scheduleOfClasses.
			getSectionsOffered()));

		scheduleOfClassesList.setFixedCellWidth(250);
		rightPanel.add(scheduleOfClassesList, BorderLayout.EAST);

		// Initialize the buttons to their proper enabled/disabled
		// state.

		resetButtons();

		// Finally, attach all of the panels to one another
		// and to the frame.
 		// Add in ascending row, then column, order.

		topLeftPanel.add(labelPanel);
		topLeftPanel.add(fieldPanel);
		leftPanel.add(topLeftPanel);
		leftPanel.add(bottomLeftPanel);
 		contentPane.add(leftPanel, BorderLayout.WEST);
 		contentPane.add(rightPanel, BorderLayout.CENTER);
 		contentPane.add(buttonPanel, BorderLayout.SOUTH);
 
		// ------------------
		// Add all behaviors.
		// ------------------

		// Different types of components require different types
		// of listeners:
		//
		// o	Text fields respond to an ActionListener
		//	whenever the Enter key is pressed.
		//
		// o	Buttons respond to an ActionListener
		// 	whenever the button is clicked.
		//
		// o	JLists respond to a ListSelectionListener
		//	whenever an item is selected.

		ActionListener aListener;
		ListSelectionListener lListener;
		WindowAdapter wListener;

		// ssnField

		aListener = new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// First, clear the fields reflecting the
				// previous student's information.

				clearFields();
		
				// We'll try to construct a Student based on
				// the ssn we read from the GUI.

				String id = ssnField.getText();
				Student theStudent = null;

				try {
					theStudent = SRSDataAccess.initializeStudent(id);
				}
				catch (InvalidStudentException e2) {
				    // Drat!  The ID was invalid.

				    currentUser = null;

				    // Let the user know that login failed,
				    // UNLESS the ID typed was blank,
				    // signalling a successful log-off.

				    JOptionPane.showMessageDialog(null, 
					"Invalid student ID; please try again.",
					"Invalid Student ID",
					JOptionPane.WARNING_MESSAGE);

				    return;
				}

				// If we've made it to this point in our code,
				// we found a valid student.  We now need
				// to request and validate the password.
				// We'll use a utility method added to the
			  	// MainFrame class for the latter purpose.

				PasswordPopup pp = new PasswordPopup(
					MainFrame.this);
				String pw = pp.getPassword();
				pp.dispose();

				if (validatePassword(theStudent, pw)) {
					    currentUser = theStudent;
					    setFields(theStudent);

					    // Let the user know that the
					    // login succeeded.

					    JOptionPane.showMessageDialog(null, 
						"Log in succeeded for " + 
						theStudent.getName() + ".",
						"Log In Succeeded",
						JOptionPane.INFORMATION_MESSAGE);
				}
				else {
					    // Password validation failed;
					    // notify the user of this.

					    JOptionPane.showMessageDialog(null, 
						"Invalid password; please " +
						"try again.",
						"Invalid Password",
						JOptionPane.WARNING_MESSAGE);
				}

				MainFrame.this.repaint();

				// Check states of the various buttons.

				resetButtons();
			}
		};
		ssnField.addActionListener(aListener);

		// addButton

		aListener = new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// Determine which section is selected
				// (note that we must cast it, as it
				// is returned as an Object reference).

				Section selected = (Section)
					scheduleOfClassesList.getSelectedValue();

				// Check to see if this COURSE is already
				// one that the student registered for,
				// even if the SECTION is different.
				// If so, warn them of this.

				if (currentUser.isCurrentlyEnrolledInSimilar(
					selected)) {
				      // Create a String array of TWO lines
				      // of messsage text, so that the popup 
				      // window won't be too wide.

				      String[] message = 
					{ "You are already enrolled in " +
					      "(or have already ",
					  "successfully completed) a section " +
					      "of this course.",
					  " " };

				      // Then, we can just hand the String
				      // array in to the showMessageDialog()
				      // call.

				      JOptionPane.showMessageDialog(null, 
					message,
					"Request Denied",
					JOptionPane.WARNING_MESSAGE);
				}
				else {
					// Attempt to enroll the student, noting
					// the status value that is returned.

					EnrollmentStatus success =
						selected.enroll(currentUser);

					// Report the status to the user.

					if (success != EnrollmentStatus.success) {
					    JOptionPane.showMessageDialog(
						null, 
						success.value(),
						"Request Denied",
						JOptionPane.WARNING_MESSAGE);
					}
					/*???
					if (success == Section.SECTION_FULL) {
					    JOptionPane.showMessageDialog(
						null, 
						"Sorry - that section is full.",
						"Request Denied",
						JOptionPane.WARNING_MESSAGE);
					}
					else if (success == 
						 Section.PREREQ_NOT_SATISFIED) {
					    JOptionPane.showMessageDialog(
						null, 
						"You haven't satisfied all " +
						"of the prerequisites for " +
						"this course.",
						"Request Denied",
						JOptionPane.WARNING_MESSAGE);
					}
					else if (success == 
						 Section.PREVIOUSLY_ENROLLED) {
				            String[] message = 
					      { "You are already enrolled in " +
					            "(or have already",
					        "successfully completed) a " +
						    "section of this course.",
						" " };

					    JOptionPane.showMessageDialog(
						null, 
						message,
						"Request Denied",
						JOptionPane.WARNING_MESSAGE);
					}
					???*/
					else { // success!
					    // Display a confirmation message.

					    JOptionPane.showMessageDialog(
						null, 
						"Seat confirmed in " + selected.
						        getRepresentedCourse().
						        getCourseNo() + ".",
						"Request Successful",
						JOptionPane.INFORMATION_MESSAGE);

					    // Update the list of sections 
					    // that this student is 
					    // registered for.

					    studentCourseList.setListData(
						currentUser.
						getSectionsEnrolled());

					    // Update the field representing
					    // student's course total.

					    int total = 
						currentUser.getCourseTotal();
					    totalCoursesLabel.setText("" + 
								      total);

					    // Clear the selection in the
					    // schedule of classes list.

					    scheduleOfClassesList.
						clearSelection();
					}
				}

				// Check states of the various buttons.

				resetButtons();
			}
		};
		addButton.addActionListener(aListener);

		// dropButton

		aListener = new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// Determine which section is selected
				// (note that we must cast it, as it
				// is returned as an Object reference).

				Section selected = (Section)
					studentCourseList.getSelectedValue();

				// Drop the course.

				selected.drop(currentUser);

				// Display a confirmation message.

				JOptionPane.showMessageDialog(null, 
					"Course " + selected.
					    getRepresentedCourse().
					    getCourseNo() + " dropped.",
					"Request Successful",
					JOptionPane.INFORMATION_MESSAGE);

				// Update the list of sections that 
				// this student is registered for.

				studentCourseList.setListData(
					currentUser.
					getSectionsEnrolled());

				// Update the field representing
				// student's course total.

				int total = currentUser.getCourseTotal();
				totalCoursesLabel.setText("" + total);

				// Check states of the various buttons.

				resetButtons();
			}
		};
		dropButton.addActionListener(aListener);

		// saveScheduleButton

		aListener = new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				try {
					SRSDataAccess.persistStudent(currentUser);

					// If no exceptions are thrown, 
				        // let the user know that his/her
					// schedule was successfully saved.

				        JOptionPane.showMessageDialog(null, 
						"Schedule saved.", 
						"Schedule Saved",
						JOptionPane.INFORMATION_MESSAGE);
				}
				/*???
				boolean success = currentUser.persist();
				if (success) {
				        // Let the user know that his/her
					// schedule was successfully saved.

				        JOptionPane.showMessageDialog(null, 
						"Schedule saved.", 
						"Schedule Saved",
						JOptionPane.INFORMATION_MESSAGE);
				}
				else {
				???*/
				catch (StudentPersistenceException e2) {
				        // Let the user know that there
					// was a problem.

				        JOptionPane.showMessageDialog(null, 
						"Problem saving your " +
						"schedule; please contact " +
						"the SRS Support Staff for " +
						"assistance.",
						"Problem Saving Schedule",
						JOptionPane.WARNING_MESSAGE);
				}
			}
		};
		saveScheduleButton.addActionListener(aListener);

		// logoffButton

		aListener = new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				clearFields();
				ssnField.setText("");
				currentUser = null;

				// Clear the selection in the
				// schedule of classes list.

				scheduleOfClassesList.clearSelection();

				// Check states of the various buttons.

				resetButtons();
			}
		};
		logoffButton.addActionListener(aListener);

		// studentCourseList

		lListener = new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent e) {
				// When an item is selected in this list,
				// we clear the selection in the other list.

				if (!(studentCourseList.isSelectionEmpty())) 
					scheduleOfClassesList.clearSelection();

				// Check states of the various buttons.

				resetButtons();
			}
		};
		studentCourseList.addListSelectionListener(lListener);

		// scheduleOfClassesList

		lListener = new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent e) {
				// When an item is selected in this list,
				// we clear the selection in the other list.

				if (!(scheduleOfClassesList.isSelectionEmpty())) 
					studentCourseList.clearSelection();

				// Check states of the various buttons.

				resetButtons();
			}
		};
		scheduleOfClassesList.addListSelectionListener(lListener);

		wListener = new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				System.exit(0);
			}
		};
		this.addWindowListener(wListener);

              	this.setVisible(true);
         }

	// Because there are so many different situations in which one or
	// more buttons need to be (de)activated, and because the logic is
	// so complex, we centralize it here and then just call this method
	// whenever we need to check the state of one or more of the buttons.  
	// It is a tradeoff of code elegance for execution efficiency:  
	// we are doing a bit more work each time (because we don't need to 
	// reset all four buttons every time), but since the execution time
	// is minimal, this seems like a reasonable tradeoff.
	private void resetButtons() {
		// There are four conditions which collectively govern the
		// state of each button:
		//	
		// o	Whether a user is logged on or not.

		boolean isLoggedOn;
		if (currentUser != null) isLoggedOn = true;
		else isLoggedOn = false;
		
		// o	Whether the user is registered for at least one course.

		boolean atLeastOne;
		if (currentUser != null && currentUser.getCourseTotal() > 0)
			atLeastOne = true;
		else atLeastOne = false;

		// o	Whether a registered course has been selected.

		boolean courseSelected;
		if (studentCourseList.isSelectionEmpty()) 
			courseSelected = false;
		else courseSelected = true;
		
		// o    Whether an item is selected in the Schedule of Classes.

		boolean catalogSelected;
		if (scheduleOfClassesList.isSelectionEmpty()) 
			catalogSelected = false;
		else catalogSelected = true;

		// Now, verify the conditions on a button-by-button basis.

		// Drop button:

		if (isLoggedOn && atLeastOne && courseSelected)
			dropButton.setEnabled(true);
		else dropButton.setEnabled(false);

		// Add button:

		if (isLoggedOn && catalogSelected)
			addButton.setEnabled(true);
		else addButton.setEnabled(false);

		// Save My Schedule button:

		if (isLoggedOn) {
			saveScheduleButton.setEnabled(true);

			// Because of the way that we created the latter two 
			// buttons, we have do a bit of extra work to make them
			// APPEAR to be turned on or off.

			l1.setEnabled(true); 
			l2.setEnabled(true); 
		}
		else {
			saveScheduleButton.setEnabled(false);
			l1.setEnabled(false); 
			l2.setEnabled(false); 
		}

		// Log Off button:

		if (isLoggedOn) logoffButton.setEnabled(true);  
		else logoffButton.setEnabled(false);  
	}

	// Called whenever a user is logged off.

	private void clearFields() {
		//? nameField.setText("");
		nameLabel.setText("");
		totalCoursesLabel.setText("");
		studentCourseList.setListData(new Vector());
	}

	// Set the various fields, lists, etc. to reflect the information
	// associated with a particular student.  (Used when logging in.)

	private void setFields(Student theStudent) {
		//? nameField.setText(theStudent.getName());
		nameLabel.setText(theStudent.getName());
		int total = theStudent.getCourseTotal();
		totalCoursesLabel.setText("" + total);
	
		// If the student is registered for any courses, list these, too.

		if (total > 0) {
			// Because we already have a vector containing the
			// sections that the student is registered for, 
			// and because these objects have defined a toString()
			// method, we can merely hand the vector to the JList.

			studentCourseList.setListData(theStudent.
				getSectionsEnrolled());
		}
	}

	// A utility method used to convert the contents of the HashMap into a Vector
	// that is sorted in alphabetic order.

	private Vector<Section> sortSections(HashMap<String, Section> sections) {
		// We'll transfer the contents of the HashMap to a TreeMap, which
		// automatically orders entries in ascending key order.

		TreeMap<String, Section> sortedMap = 
			new TreeMap<String, Section>(sections);
		
		// Then, we'll formulate a Vector containing the Sections.

		Vector<Section> sortedSections = 
			new Vector<Section>(sortedMap.values());

		return sortedSections;
	}

	// A utility method used to validate a Student's password by comparing it
	// to the first three digits of his/her student ID number.

	private boolean validatePassword(Student s, String pw) {
		if (pw == null) return false;
		else if (s.getSsn().startsWith(pw)) return true;
		else return false;
	}
 }

===============

// PasswordPopup.java - Chapter 16 version.

// Copyright 2000 by Jacquie Barker - all rights reserved.

// A GUI class.

import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;

public class PasswordPopup extends JDialog {
	private String password;

	// Attributes representing the GUI components.

	private Container contentPane;
	private JLabel passwordLabel;
	private JPasswordField passwordField;

	// Constructor.
	public PasswordPopup(Frame parent) {
		// Invoke the generic JDialog constructor first.

		super(parent, "Enter Password", true);

		contentPane = this.getContentPane();
		contentPane.setLayout(new GridLayout(1, 2));

		passwordLabel = new JLabel("Password:  ", JLabel.RIGHT);
		passwordLabel.setForeground(Color.black);

		passwordField = new JPasswordField();
		ActionListener aListener = new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// Retrieve the password.
				char[] pw = passwordField.getPassword();
				password = new String(pw).trim();

				// Hide, but don't dispose of, this window ...
				// we need to give the client code a chance to
				// retrieve the user's typed response via
				// the getPassword() method first.
				PasswordPopup.this.setVisible(false);
			}
		};
		passwordField.addActionListener(aListener);

		contentPane.add(passwordLabel);
		contentPane.add(passwordField);

		this.setSize(200, 80);

		// Center it on the screen.
		Dimension screenSize = Toolkit.getDefaultToolkit().
					    getScreenSize();
		Dimension popupSize = this.getSize();
	        int width = popupSize.width;
		int height = popupSize.height;
	    	this.setLocation((screenSize.width - width)/2, 
		                 (screenSize.height - height)/2);

		this.setVisible(true);
	}

	public String getPassword() {
		return password;
	}

	// Test scaffold.
	public static void main(String[] args) {
		PasswordPopup pp = new PasswordPopup(new JFrame());
		System.out.println("Password typed:  " + pp.getPassword());
		pp.dispose();
		System.exit(0);
	}
}

===============

// Student.java - Chapter 16, Java 5 version.

// Copyright 2005 by Jacquie Barker - all rights reserved.

// A MODEL class.


//#####################################################################
// A few methods were added to this class versus the Chapter 14 version
// to accommodate GUI functionality.
//#####################################################################

import java.util.*;

public class Student extends Person {
	//------------
	// Attributes.
	//------------

	private String major;
	private String degree;
	private Transcript transcript;
	private ArrayList<Section> attends; 
	
	//----------------
	// Constructor(s).
	//----------------

	public Student(String name, String ssn, String major, String degree) {
		// Reuse the code of the parent's constructor.

		super(name, ssn);

		setMajor(major);
		setDegree(degree);

		// Create a brand new Transcript.

		setTranscript(new Transcript(this));

		// Note that we're instantiating empty support Collection(s).

		attends = new ArrayList<Section>();
	}
	
	// A second simpler form of constructor.

	public Student(String ssn) {
		// Reuse the code of the other Student constructor.

		this("?", ssn, "TBD", "TBD");
	}

	//------------------
	// Accessor methods.
	//------------------

	public void setMajor(String major) {
		this.major = major;
	}

	public String getMajor() {
		return major;
	}

	public void setDegree(String degree) {
		this.degree = degree;
	}

	public String getDegree() {
		return degree;
	}

	public void setTranscript(Transcript t) {
		transcript = t;
	}

	public Transcript getTranscript() {
		return transcript;
	}

	//-----------------------------
	// Miscellaneous other methods.
	//-----------------------------

	public void display() {
		// First, let's display the generic Person info.

		super.display();
		
		// Then, display Student-specific info.

		System.out.println("Student-Specific Information:");
		System.out.println("\tMajor:  " + getMajor());
		System.out.println("\tDegree:  " + getDegree());
		displayCourseSchedule();
		printTranscript();

		// Finish with a blank line.
		System.out.println();
	}	
	
	// We are forced to program this method because it is specified
	// as an abstract method in our parent class (Person); failing to
	// do so would render the Student class abstract, as well.
	//
	// For a Student, we wish to return a String as follows:
	//
	// 	Joe Blow (123-45-6789) [Master of Science - Math]

	public String toString() {
		return getName() + " (" + getSsn() + ") [" + getDegree() +
		       " - " + getMajor() + "]";
	}

	public void displayCourseSchedule() {
		// Display a title first.

		System.out.println("Course Schedule for " + getName());
		
		// Step through the ArrayList of Section objects, 
		// processing these one by one.

		for (Section s : attends) {
		    // Since the attends ArrayList contains Sections that the
		    // Student took in the past as well as those for which
		    // the Student is currently enrolled, we only want to
		    // report on those for which a grade has not yet been
		    // assigned.
            
                    if (s.getGrade(this) == null) {
			System.out.println("\tCourse No.:  " + 
				s.getRepresentedCourse().getCourseNo());
			System.out.println("\tSection No.:  " + 
				s.getSectionNo());
			System.out.println("\tCourse Name:  " + 
				s.getRepresentedCourse().getCourseName());
			System.out.println("\tMeeting Day and Time Held:  "  +
				s.getDayOfWeek() + " - " +
				s.getTimeOfDay());
			System.out.println("\tRoom Location:  "  +
				s.getRoom());
			System.out.println("\tProfessor's Name:  " +
				s.getInstructor().getName());
			System.out.println("\t-----");
		    }
		}
	}
	
	public void addSection(Section s) {
		attends.add(s);
	}
	
	public void dropSection(Section s) {
		attends.remove(s);
	}
	
	// Determine whether the Student is already enrolled in THIS
	// EXACT Section.

	public boolean isEnrolledIn(Section s) {
		if (attends.contains(s)) return true;
		else return false;
	}
		
	// Determine whether the Student is already enrolled in ANOTHER
	// Section of this SAME Course.

	public boolean isCurrentlyEnrolledInSimilar(Section s1) {
		boolean foundMatch = false;
		Course c1 = s1.getRepresentedCourse();
		for (Section s2 : attends) {
			Course c2 = s2.getRepresentedCourse();
			if (c1 == c2) {
				// There is indeed a Section in the attends()
				// ArrayList representing the same Course.
				// Check to see if the Student is CURRENTLY
				// ENROLLED (i.e., whether or not he has
				// yet received a grade).  If there is no
				// grade, he/she is currently enrolled; if
				// there is a grade, then he/she completed
				// the course some time in the past.
				if (s2.getGrade(this) == null) {
					// No grade was assigned!  This means
					// that the Student is currently
					// enrolled in a Section of this
					// same Course.
					foundMatch = true;
					break;
				}
			}
		}

		return foundMatch;
	}
		
	public void printTranscript() {
		getTranscript().display();
	}

	public Collection<Section> getEnrolledSections() {
		return attends;
	}

	//########################################################
	// The remaining methods were added in support of the GUI.
	//########################################################

	public Vector<Section> getSectionsEnrolled() {
		return new Vector<Section>(attends);
	}

	public int getCourseTotal() {
		return attends.size();
	}
}

===============

// SRS.java - Chapter 16, Java 5 version.

// Copyright 2005 by Jacquie Barker - all rights reserved.

// The main driver for the command-line driven version of the SRS, with
// a graphical user interface and object persistence added.


import java.util.*;

public class SRS {
	// We can effectively create "global" data by declaring
	// collections of objects as public static attributes in 
	// the main class; these can then be accessed throughout the
	// SRS application as:  SRS.collectionName; e.g., SRS.faculty.  

	public static Faculty faculty; 
	public static CourseCatalog courseCatalog; 
	public static ScheduleOfClasses scheduleOfClasses;

	// We aren't creating a collection for Student objects, however, because
	// we're only going to handle one Student at a time -- namely, whichever 
	// Student is currently logged on.

	public static void main(String[] args) {
		// Initialize all objects.  The method by which we are accessing
		// data (in this case, from ASCII files) is "transparent" to this
		// application by virtue of our introduction of the SRSDataAccess class
		// as a data layer utility class.

		// We're using custom exceptions ...

		try {
			// The order in which we create these is important:
			// creating the ScheduleOfClasses relies on the existence of 
			// the CourseCatalog, and creating the Faculty relies on the 
			// existence of the ScheduleOfClasses.

			courseCatalog = SRSDataAccess.initializeCourseCatalog();
			scheduleOfClasses = 
				SRSDataAccess.initializeScheduleOfClasses("SP2005");
			faculty = SRSDataAccess.initializeFaculty();
		}
		catch (SRSInitializationException e) {
			System.out.println("ERROR:  " + e.getMessage() + "-- GOODBYE!");
			System.exit(0);	
		}

		// Create and display an instance of the main GUI window.

		new MainFrame();
	}
}
